<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateMessagesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create(config('messages.table_names.message_groups'), function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->string('code');
            $table->timestamps();
            $table->softDeletes();
        });

        Schema::create(config('messages.table_names.message_group_members'), function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->unsignedBigInteger('group_id');
            $table->string('model_type')->nullable();
            $table->unsignedBigInteger('model_id')->nullable();
            $table->unsignedInteger('count')->nullable();
            $table->unsignedInteger('count_read')->default('0');

            $table->unique(['group_id', 'model_type', 'model_id']);

            $table->foreign('group_id')
                ->references('id')
                ->on(config('messages.table_names.message_groups'))
                ->cascadeOnDelete();
        });

        Schema::create(config('messages.table_names.messages'), function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->unsignedBigInteger('group_id')->nullable();
            $table->unsignedBigInteger('main_id')->nullable()->comment(
                'id of the first message in the thread, duplicated for first message to'
            );
            $table->unsignedBigInteger('reply_id')->nullable()->comment('message id to which they reply');
            $table->boolean('is_main')->nullable()->comment('is first message in thread');
            $table->string('subject')
                ->nullable();
            $table->text('message');
            $table->string('owner_model_type')
                ->nullable()
                ->comment('Site|Project|etc.|null where create the message');
            $table->unsignedBigInteger('owner_model_id')
                ->nullable();
            $table->string('from_model_type')
                ->nullable()
                ->comment('User|etc. model who created the message');
            $table->unsignedBigInteger('from_model_id')
                ->nullable();
            $table->jsonb('data')
                ->nullable();

            $table->timestamps();
            $table->softDeletes();

            $table->foreign('group_id')->references('id')->on(config('messages.table_names.message_groups'));
            $table->foreign('main_id')->references('id')->on(config('messages.table_names.messages'));
            $table->foreign('reply_id')->references('id')->on(config('messages.table_names.messages'));
            $table->index('is_main');
            $table->index(['owner_model_type', 'owner_model_id']);
            $table->index(['from_model_type', 'from_model_id']);
        });

        Schema::create(config('messages.table_names.message_statistics'), function (Blueprint $table) {
            $table->unsignedBigInteger('main_id');
            $table->unsignedInteger('count')->nullable();
            $table->unsignedBigInteger('last_id')->nullable();
            $table->unsignedInteger('last_at')->nullable();

            $table->primary('main_id');
            $table->foreign('main_id')->references('id')
                ->on(config('messages.table_names.messages'));
            $table->foreign('last_id')->references('id')
                ->on(config('messages.table_names.messages'));
        });

        /*models between which correspondence takes place*/
        Schema::create(config('messages.table_names.message_members'), function (Blueprint $table) {
            $table->unsignedBigInteger('message_id');

            $table->string('model_type')
                ->comment('For User|etc.');
            $table->unsignedBigInteger('model_id');

            $table->foreign('message_id')->references('id')
                ->on(config('messages.table_names.messages'));
        });

        /*model that is discussed in correspondence or within which something is discussed (Order|Payment|etc.)*/
        Schema::create(config('messages.table_names.message_models'), function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedBigInteger('main_id');
            $table->string('model_type')
                ->comment('For Order|etc.');
            $table->unsignedBigInteger('model_id');

            $table->unique(['main_id', 'model_type', 'model_id']);
            $table->foreign('main_id')->references('id')
                ->on(config('messages.table_names.messages'));
        });

        Schema::create(config('messages.table_names.message_member_statistics'), function (Blueprint $table) {
            $table->increments('id');
            $table->string('model_type')
                ->comment('For User|User message tag (my orders)|etc.');
            $table->unsignedBigInteger('model_id');

            $table->unsignedInteger('count')->nullable();
            $table->unsignedInteger('count_read')->default('0');

            $table->unique(['model_type', 'model_id']);
        });

        Schema::create(config('messages.table_names.message_member_message_statistics'), function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedBigInteger('main_id');
            $table->string('model_type')
                ->comment('For User|User message tag (my orders)|etc.');
            $table->unsignedBigInteger('model_id');
            $table->unsignedInteger('count_read')->default('0');
            $table->unsignedBigInteger('last_read_message_id')->nullable();
            $table->unsignedInteger('last_read_message_at')->nullable();

            $table->unique(['model_type', 'model_id', 'main_id']);
            $table->foreign('main_id')->references('id')
                ->on(config('messages.table_names.messages'));
            $table->foreign('last_read_message_id')->references('id')
                ->on(config('messages.table_names.messages'));
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists(config('messages.table_names.message_group_members'));
        Schema::dropIfExists(config('messages.table_names.message_groups'));
        Schema::dropIfExists(config('messages.table_names.message_models'));
        Schema::dropIfExists(config('messages.table_names.message_members'));
        Schema::dropIfExists(config('messages.table_names.message_statistics'));
        Schema::dropIfExists(config('messages.table_names.messages'));
    }
}
